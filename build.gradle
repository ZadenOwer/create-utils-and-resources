plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.20.1-1.0.0'
group = 'com.zaden.createutilsandresources'
archivesBaseName = 'createutilsandresources'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: '1.20.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createutilsandresources'

            arg '-mixin.config=createutilsandresources.mixins.json'
            arg '-mixin.config=create.mixins.json'
            mods {
                createutilsandresources {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createutilsandresources'

            arg '-mixin.config=createutilsandresources.mixins.json'
            arg '-mixin.config=create.mixins.json'
            mods {
                createutilsandresources {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'createutilsandresources'

            arg '-mixin.config=createutilsandresources.mixins.json'
            arg '-mixin.config=create.mixins.json'
            mods {
                createutilsandresources {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            arg '-mixin.config=createutilsandresources.mixins.json'
            arg '-mixin.config=create.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'createutilsandresources', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                createutilsandresources {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort

    maven {
        url = "https://cursemaven.com"
    }
    maven {
        name = "squiddev"
        url = "https://squiddev.cc/maven/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.30'

    implementation(fg.deobf("com.simibubi.create:create-1.20.1:6.0.2-52:slim") { transitive = false })
    compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-1.20.1:1.0.0-215"))
    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-1.20.1:1.0.0-215"))
    implementation (fg.deobf("net.createmod.ponder:Ponder-Forge-1.20.1:1.0.36"))
    implementation fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3")

    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:15.19.0.85")

    compileOnly("cc.tweaked:cc-tweaked-1.20.1-core-api:1.105.0")
    compileOnly fg.deobf("cc.tweaked:cc-tweaked-1.20.1-forge-api:1.105.0")
    runtimeOnly fg.deobf("cc.tweaked:cc-tweaked-1.20.1-forge:1.105.0")
    implementation fg.deobf("curse.maven:selene-499980:4980621")
    implementation fg.deobf("curse.maven:createaddition-439890:6256349")

    implementation fg.deobf("dev.latvian.mods:kubejs-forge:2001.6.5-build.17")

    implementation fg.deobf("dev.latvian.mods:rhino-forge:1902.2.3-build.284")
    implementation fg.deobf("dev.architectury:architectury-forge:6.6.92")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "createutilsandresources",
                "Specification-Vendor"    : "createutilsandresources",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "createutilsandresources",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'createutilsandresources.mixins.json'
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, 'createutilsandresources.refmap.json'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
